<% content_for :title, "Admin Dashboard" %>

<div class="min-h-screen bg-background">
  <div class="container mx-auto px-4 py-8">
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-foreground">Admin Dashboard</h1>
      <p class="text-muted-foreground">System overview and management</p>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <%= render_card do %>
        <div class="p-6">
          <div class="flex items-center">
            <div class="bg-primary/10 rounded-full p-3">
              <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M16.5 7.5a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-2xl font-bold text-foreground"><%= @total_users %></p>
              <p class="text-muted-foreground">Total Users</p>
            </div>
          </div>
        </div>
      <% end %>

      <%= render_card do %>
        <div class="p-6">
          <div class="flex items-center">
            <div class="bg-success/10 rounded-full p-3">
              <svg class="w-6 h-6 text-success" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-2xl font-bold text-foreground"><%= @total_files %></p>
              <p class="text-muted-foreground">Files Processed</p>
            </div>
          </div>
        </div>
      <% end %>

      <%= render_card do %>
        <div class="p-6">
          <div class="flex items-center">
            <div class="bg-purple-500/10 rounded-full p-3">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-2xl font-bold text-foreground"><%= @total_analyses %></p>
              <p class="text-muted-foreground">AI Analyses</p>
            </div>
          </div>
        </div>
      <% end %>
    </div>

    <!-- Pipeline Status -->
    <div class="mb-8">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-semibold text-foreground">데이터 파이프라인 상태</h2>
        <%= link_to "상세 관리", admin_data_pipeline_index_path, class: "text-primary hover:text-primary/80 text-sm font-medium" %>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <!-- Stack Overflow Status -->
        <%= render_card(class: "border-l-4 border-l-blue-500") do %>
          <div class="p-4">
            <div class="flex items-center justify-between mb-2">
              <h3 class="font-semibold text-foreground">스택 오버플로우</h3>
              <div class="flex items-center">
                <div class="w-2 h-2 bg-success rounded-full animate-pulse" id="stackoverflow-status"></div>
                <span class="ml-2 text-sm text-muted-foreground" id="stackoverflow-text">실행 중</span>
              </div>
            </div>
            <div class="text-sm text-muted-foreground">
              <div class="flex justify-between">
                <span>수집량:</span>
                <span id="stackoverflow-count">1,247</span>
              </div>
              <div class="flex justify-between">
                <span>품질:</span>
                <div class="flex space-x-1">
                  <span class="text-success">우수: 312</span>
                  <span class="text-info">양호: 623</span>
                  <span class="text-warning">보통: 312</span>
                </div>
              </div>
            </div>
          </div>
        <% end %>
        
        <!-- Reddit Status -->
        <%= render_card(class: "border-l-4 border-l-orange-500") do %>
          <div class="p-4">
            <div class="flex items-center justify-between mb-2">
              <h3 class="font-semibold text-foreground">레딧</h3>
              <div class="flex items-center">
                <div class="w-2 h-2 bg-success rounded-full animate-pulse" id="reddit-status"></div>
                <span class="ml-2 text-sm text-muted-foreground" id="reddit-text">실행 중</span>
              </div>
            </div>
            <div class="text-sm text-muted-foreground">
              <div class="flex justify-between">
                <span>수집량:</span>
                <span id="reddit-count">856</span>
              </div>
              <div class="flex justify-between">
                <span>품질:</span>
                <div class="flex space-x-1">
                  <span class="text-success">우수: 214</span>
                  <span class="text-info">양호: 428</span>
                  <span class="text-warning">보통: 214</span>
                </div>
              </div>
            </div>
          </div>
        <% end %>
        
        <!-- Oppadu Status -->
        <%= render_card(class: "border-l-4 border-l-purple-500") do %>
          <div class="p-4">
            <div class="flex items-center justify-between mb-2">
              <h3 class="font-semibold text-foreground">오빠두</h3>
              <div class="flex items-center">
                <div class="w-2 h-2 bg-yellow-500 rounded-full" id="oppadu-status"></div>
                <span class="ml-2 text-sm text-muted-foreground" id="oppadu-text">일시정지</span>
              </div>
            </div>
            <div class="text-sm text-muted-foreground">
              <div class="flex justify-between">
                <span>수집량:</span>
                <span id="oppadu-count">2,103</span>
              </div>
              <div class="flex justify-between">
                <span>품질:</span>
                <div class="flex space-x-1">
                  <span class="text-success">우수: 841</span>
                  <span class="text-info">양호: 1,052</span>
                  <span class="text-warning">보통: 210</span>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <!-- AI Cost Monitoring -->
    <div class="mb-8">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-semibold text-foreground">AI 비용 모니터링</h2>
        <%= link_to "상세 분석", admin_ai_cost_monitoring_index_path, class: "text-primary hover:text-primary/80 text-sm font-medium" %>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <!-- Total Cost -->
        <%= render_card do %>
          <div class="p-4">
            <div class="flex items-center">
              <div class="bg-primary/10 rounded-full p-2">
                <svg class="w-5 h-5 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-lg font-bold text-foreground" id="total-cost">$127.45</p>
                <p class="text-sm text-muted-foreground">총 사용 비용</p>
              </div>
            </div>
          </div>
        <% end %>
        
        <!-- Today's Cost -->
        <%= render_card do %>
          <div class="p-4">
            <div class="flex items-center">
              <div class="bg-success/10 rounded-full p-2">
                <svg class="w-5 h-5 text-success" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-lg font-bold text-foreground" id="today-cost">$12.34</p>
                <p class="text-sm text-muted-foreground">오늘 사용량</p>
              </div>
            </div>
          </div>
        <% end %>
        
        <!-- Remaining Budget -->
        <%= render_card do %>
          <div class="p-4">
            <div class="flex items-center">
              <div class="bg-yellow-500/10 rounded-full p-2">
                <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-lg font-bold text-foreground" id="remaining-budget">$372.66</p>
                <p class="text-sm text-muted-foreground">남은 예산</p>
              </div>
            </div>
          </div>
        <% end %>
        
        <!-- Top Model -->
        <%= render_card do %>
          <div class="p-4">
            <div class="flex items-center">
              <div class="bg-purple-500/10 rounded-full p-2">
                <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-lg font-bold text-foreground" id="top-model">Claude-3</p>
                <p class="text-sm text-muted-foreground">최다 사용 모델</p>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <!-- Recent Activity -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <%= render_card do %>
        <div class="p-6">
          <h2 class="text-lg font-semibold text-foreground mb-4">Recent Users</h2>
          <div class="space-y-3">
            <% if @recent_users.any? %>
              <% @recent_users.each do |user| %>
                <div class="flex items-center justify-between py-2 border-b border-border">
                  <div>
                    <p class="font-medium text-foreground"><%= user.name %></p>
                    <p class="text-sm text-muted-foreground"><%= user.email %></p>
                  </div>
                  <div class="text-right">
                    <div class="text-sm text-muted-foreground"><%= time_ago_in_words(user.created_at) %> ago</div>
                    <%= render_badge(variant: user.admin? ? :destructive : :secondary) do %>
                      <%= user.role.humanize %>
                    <% end %>
                  </div>
                </div>
              <% end %>
            <% else %>
              <p class="text-muted-foreground text-center py-4">No users found</p>
            <% end %>
          </div>
        </div>
      <% end %>

      <%= render_card do %>
        <div class="p-6">
          <h2 class="text-lg font-semibold text-foreground mb-4">Recent Files</h2>
          <div class="space-y-3">
            <% if @recent_files.any? %>
              <% @recent_files.each do |file| %>
                <div class="flex items-center justify-between py-2 border-b border-border">
                  <div>
                    <p class="font-medium text-foreground"><%= file.original_name %></p>
                    <p class="text-sm text-muted-foreground"><%= file.human_file_size %></p>
                  </div>
                  <div class="text-right">
                    <div class="text-sm text-muted-foreground"><%= time_ago_in_words(file.created_at) %> ago</div>
                    <%= render_badge(
                      variant: case file.status
                               when 'uploaded' then :info
                               when 'processing' then :warning
                               when 'analyzed' then :success
                               when 'failed' then :destructive
                               else :secondary
                               end
                    ) do %>
                      <%= file.status.humanize %>
                    <% end %>
                  </div>
                </div>
              <% end %>
            <% else %>
              <p class="text-muted-foreground text-center py-4">No files found</p>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>

    <!-- Navigation -->
    <div class="mt-8">
      <%= render_card do %>
        <div class="p-6">
          <h2 class="text-lg font-semibold text-foreground mb-4">Admin Actions</h2>
          <div class="flex flex-wrap gap-4">
            <%= link_to admin_users_path do %>
              <%= render_button("Manage Users", variant: :outline) %>
            <% end %>
            <%= link_to admin_analyses_path do %>
              <%= render_button("View Analyses", variant: :outline) %>
            <% end %>
            <%= link_to admin_stats_path do %>
              <%= render_button("System Stats", variant: :outline) %>
            <% end %>
            <%= link_to admin_knowledge_base_root_path do %>
              <%= render_button("Knowledge Base", variant: :outline) %>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Real-time pipeline status updates
  function updatePipelineStatus() {
    fetch('/admin/data_pipeline/health_check')
      .then(response => response.json())
      .then(data => {
        updateSourceStatus('stackoverflow', data.sources.stackoverflow);
        updateSourceStatus('reddit', data.sources.reddit);
        updateSourceStatus('oppadu', data.sources.oppadu);
      })
      .catch(error => {
        console.error('Error fetching pipeline status:', error);
      });
  }
  
  function updateSourceStatus(source, status) {
    const statusElement = document.getElementById(`${source}-status`);
    const textElement = document.getElementById(`${source}-text`);
    const countElement = document.getElementById(`${source}-count`);
    
    if (statusElement && textElement) {
      // Update status indicator
      statusElement.className = `w-2 h-2 rounded-full ${getStatusClass(status.status)}`;
      textElement.textContent = getStatusText(status.status);
      
      // Update count
      if (countElement) {
        countElement.textContent = status.collected_items.toLocaleString();
      }
    }
  }
  
  function getStatusClass(status) {
    switch(status) {
      case 'running':
        return 'bg-success animate-pulse';
      case 'failed':
        return 'bg-destructive';
      case 'stopped':
        return 'bg-muted';
      default:
        return 'bg-yellow-500';
    }
  }
  
  function getStatusText(status) {
    switch(status) {
      case 'running':
        return '실행 중';
      case 'failed':
        return '실패';
      case 'stopped':
        return '중지';
      default:
        return '일시정지';
    }
  }
  
  // Real-time AI cost monitoring updates
  function updateAICostMonitoring() {
    fetch('/admin/ai_cost_monitoring/api_usage')
      .then(response => response.json())
      .then(data => {
        // Update cost metrics with mock data for demonstration
        updateCostMetrics();
      })
      .catch(error => {
        console.error('Error fetching AI cost data:', error);
      });
  }
  
  function updateCostMetrics() {
    // Mock data updates - in real implementation, these would come from the API
    const totalCostElement = document.getElementById('total-cost');
    const todayCostElement = document.getElementById('today-cost');
    const remainingBudgetElement = document.getElementById('remaining-budget');
    const topModelElement = document.getElementById('top-model');
    
    if (totalCostElement) {
      // Simulate increasing costs
      const currentCost = parseFloat(totalCostElement.textContent.replace('$', ''));
      const newCost = currentCost + Math.random() * 0.5;
      totalCostElement.textContent = `$${newCost.toFixed(2)}`;
    }
    
    if (todayCostElement) {
      const currentCost = parseFloat(todayCostElement.textContent.replace('$', ''));
      const newCost = currentCost + Math.random() * 0.1;
      todayCostElement.textContent = `$${newCost.toFixed(2)}`;
    }
    
    if (remainingBudgetElement) {
      const currentBudget = parseFloat(remainingBudgetElement.textContent.replace('$', ''));
      const newBudget = Math.max(0, currentBudget - Math.random() * 0.1);
      remainingBudgetElement.textContent = `$${newBudget.toFixed(2)}`;
    }
  }
  
  // WebSocket connection for real-time updates
  const cable = ActionCable.createConsumer();
  
  const dashboardSubscription = cable.subscriptions.create({
    channel: 'AdminDashboardChannel'
  }, {
    connected() {
      console.log('Connected to AdminDashboardChannel');
    },
    
    disconnected() {
      console.log('Disconnected from AdminDashboardChannel');
    },
    
    received(data) {
      handleDashboardUpdate(data);
    }
  });
  
  function handleDashboardUpdate(data) {
    switch(data.type) {
      case 'pipeline_status':
        updateSourceStatus(data.source, data.status);
        break;
      case 'cost_update':
        updateCostMetrics();
        break;
      case 'quality_update':
        updateQualityMetrics(data.source, data.quality);
        break;
    }
  }
  
  function updateQualityMetrics(source, quality) {
    // Update quality metrics for each source
    const qualityText = document.querySelector(`#${source}-quality`);
    if (qualityText) {
      qualityText.innerHTML = `
        <span class="text-success">우수: ${quality.excellent}</span>
        <span class="text-info">양호: ${quality.good}</span>
        <span class="text-warning">보통: ${quality.fair}</span>
      `;
    }
  }
  
  // Update status every 10 seconds
  setInterval(() => {
    if (!document.hidden) {
      updatePipelineStatus();
      updateAICostMonitoring();
    }
  }, 10000);
  
  // Initial load
  updatePipelineStatus();
  updateAICostMonitoring();
});
</script>