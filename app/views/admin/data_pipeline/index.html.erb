<% content_for :title, "데이터 파이프라인 제어" %>

<div class="min-h-screen bg-background">
  <div class="container mx-auto px-4 py-8">
    <!-- Page Header -->
    <div class="flex items-center justify-between mb-8">
      <div>
        <h1 class="text-3xl font-bold text-foreground">데이터 파이프라인 제어</h1>
        <p class="text-muted-foreground mt-2">
          스택 오버플로우, 레딧, 오빠두 데이터 수집 파이프라인을 관리하세요
        </p>
      </div>
      <div class="flex gap-2">
        <%= button_to admin_data_pipeline_start_collection_path, 
              method: :post, 
              class: "inline-flex items-center px-4 py-2 bg-success hover:bg-success/90 text-primary-foreground rounded-md text-sm font-medium",
              data: { confirm: "모든 데이터 수집을 시작하시겠습니까?" } do %>
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1m-6-8h1m4 0h1M9 6h1m4 0h1m-6 8h1m4 0h1m-6-4h1m4 0h1"></path>
          </svg>
          모든 수집 시작
        <% end %>
        
        <%= button_to admin_data_pipeline_stop_collection_path, 
              method: :post, 
              class: "inline-flex items-center px-4 py-2 bg-destructive hover:bg-destructive/90 text-primary-foreground rounded-md text-sm font-medium",
              data: { confirm: "모든 데이터 수집을 중지하시겠습니까?" } do %>
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 10h6v4H9z"></path>
          </svg>
          모든 수집 중지
        <% end %>
        
        <%= button_to admin_data_pipeline_restart_failed_path, 
              method: :post, 
              class: "inline-flex items-center px-4 py-2 bg-warning hover:bg-warning/90 text-primary-foreground rounded-md text-sm font-medium",
              data: { confirm: "실패한 소스를 재시작하시겠습니까?" } do %>
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          실패한 소스 재시작
        <% end %>
      </div>
    </div>

    <!-- Overall Health Status -->
    <div class="mb-8">
      <div class="bg-card rounded-lg shadow p-6">
        <h2 class="text-xl font-semibold text-foreground mb-4">전체 상태</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div class="text-center">
            <div class="text-2xl font-bold text-foreground">
              <%= @health_check[:total_sources] %>
            </div>
            <div class="text-sm text-muted-foreground">총 소스</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-success">
              <%= @health_check[:running_sources] %>
            </div>
            <div class="text-sm text-muted-foreground">실행 중</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-destructive">
              <%= @health_check[:failed_sources] %>
            </div>
            <div class="text-sm text-muted-foreground">실패</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-muted-foreground">
              <%= @health_check[:stopped_sources] %>
            </div>
            <div class="text-sm text-muted-foreground">중지</div>
          </div>
        </div>
        
        <div class="mt-4 flex items-center justify-center">
          <div class="flex items-center">
            <div class="w-3 h-3 rounded-full mr-2 <%= case @health_check[:overall_health]
                                                      when 'healthy' then 'bg-success'
                                                      when 'degraded' then 'bg-warning'
                                                      else 'bg-destructive'
                                                      end %>"></div>
            <span class="text-sm font-medium text-foreground">
              <%= case @health_check[:overall_health]
                  when 'healthy' then '정상'
                  when 'degraded' then '일부 장애'
                  else '심각한 장애'
                  end %>
            </span>
          </div>
        </div>
      </div>
    </div>

    <!-- Individual Source Status -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
      <% @pipeline_status.each do |source, status| %>
        <div class="bg-card rounded-lg shadow p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-foreground">
              <%= case source
                  when 'stackoverflow' then '스택 오버플로우'
                  when 'reddit' then '레딧'
                  when 'oppadu' then '오빠두'
                  else source.titleize
                  end %>
            </h3>
            <div class="flex items-center">
              <div class="w-3 h-3 rounded-full mr-2 <%= case status[:status]
                                                        when 'running' then 'bg-success animate-pulse'
                                                        when 'failed' then 'bg-destructive'
                                                        else 'bg-muted-foreground'
                                                        end %>"></div>
              <span class="text-sm font-medium text-foreground">
                <%= case status[:status]
                    when 'running' then '실행 중'
                    when 'failed' then '실패'
                    when 'stopped' then '중지'
                    else status[:status]
                    end %>
              </span>
            </div>
          </div>
          
          <div class="space-y-3">
            <div class="flex justify-between text-sm">
              <span class="text-muted-foreground">수집된 항목:</span>
              <span class="font-medium text-foreground">
                <%= number_with_delimiter(status[:collected_items]) %>
              </span>
            </div>
            
            <div class="flex justify-between text-sm">
              <span class="text-muted-foreground">수집 속도:</span>
              <span class="font-medium text-foreground">
                <%= status[:collection_rate] %> items/min
              </span>
            </div>
            
            <% if status[:last_success_at] %>
              <div class="flex justify-between text-sm">
                <span class="text-muted-foreground">마지막 성공:</span>
                <span class="font-medium text-foreground">
                  <%= time_ago_in_words(status[:last_success_at]) %> 전
                </span>
              </div>
            <% end %>
            
            <% if status[:error_count] > 0 %>
              <div class="flex justify-between text-sm">
                <span class="text-muted-foreground">오류 횟수:</span>
                <span class="font-medium text-destructive">
                  <%= status[:error_count] %>
                </span>
              </div>
            <% end %>
            
            <% if status[:last_error] %>
              <div class="text-sm">
                <span class="text-muted-foreground">마지막 오류:</span>
                <p class="text-destructive text-xs mt-1 truncate">
                  <%= status[:last_error] %>
                </p>
              </div>
            <% end %>
          </div>
          
          <div class="mt-4 flex gap-2">
            <%= button_to admin_data_pipeline_start_collection_path, 
                  method: :post, 
                  params: { sources: [source] },
                  class: "flex-1 px-3 py-2 bg-success hover:bg-success/90 text-primary-foreground rounded text-sm font-medium #{'opacity-50 cursor-not-allowed' if status[:status] == 'running'}",
                  disabled: status[:status] == 'running' do %>
              시작
            <% end %>
            
            <%= button_to admin_data_pipeline_stop_collection_path, 
                  method: :post, 
                  params: { sources: [source] },
                  class: "flex-1 px-3 py-2 bg-destructive hover:bg-destructive/90 text-primary-foreground rounded text-sm font-medium #{'opacity-50 cursor-not-allowed' if status[:status] == 'stopped'}",
                  disabled: status[:status] == 'stopped' do %>
              중지
            <% end %>
          </div>
        </div>
      <% end %>
    </div>

    <!-- Real-time Pipeline Logs -->
    <div class="bg-card rounded-lg shadow">
      <div class="p-6 border-b border-border">
        <h2 class="text-xl font-semibold text-foreground">실시간 파이프라인 로그</h2>
        <p class="text-sm text-muted-foreground mt-1">
          각 데이터 소스별로 수집되는 게시물의 실시간 로그를 확인하세요
        </p>
      </div>
      
      <!-- Tab Navigation -->
      <div class="border-b border-border">
        <nav class="-mb-px flex space-x-8 px-6" aria-label="Tabs">
          <button class="pipeline-log-tab border-primary text-primary whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" 
                  data-source="stackoverflow">
            스택 오버플로우
          </button>
          <button class="pipeline-log-tab border-transparent text-muted-foreground hover:text-foreground hover:border-border whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" 
                  data-source="reddit">
            레딧
          </button>
          <button class="pipeline-log-tab border-transparent text-muted-foreground hover:text-foreground hover:border-border whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" 
                  data-source="oppadu">
            오빠두
          </button>
        </nav>
      </div>
      
      <!-- Log Content -->
      <div class="p-6">
        <div id="stackoverflow-logs" class="pipeline-log-content">
          <div class="bg-background rounded-lg p-4 font-mono text-sm text-success h-96 overflow-y-auto" 
               id="stackoverflow-log-container">
            <div class="text-muted-foreground text-center py-8">
              스택 오버플로우 로그를 기다리는 중...
            </div>
          </div>
        </div>
        
        <div id="reddit-logs" class="pipeline-log-content hidden">
          <div class="bg-background rounded-lg p-4 font-mono text-sm text-success h-96 overflow-y-auto" 
               id="reddit-log-container">
            <div class="text-muted-foreground text-center py-8">
              레딧 로그를 기다리는 중...
            </div>
          </div>
        </div>
        
        <div id="oppadu-logs" class="pipeline-log-content hidden">
          <div class="bg-background rounded-lg p-4 font-mono text-sm text-success h-96 overflow-y-auto" 
               id="oppadu-log-container">
            <div class="text-muted-foreground text-center py-8">
              오빠두 로그를 기다리는 중...
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Tab switching functionality
  const tabs = document.querySelectorAll('.pipeline-log-tab');
  const contents = document.querySelectorAll('.pipeline-log-content');
  
  tabs.forEach(tab => {
    tab.addEventListener('click', function() {
      // Remove active classes
      tabs.forEach(t => {
        t.classList.remove('border-primary', 'text-primary');
        t.classList.add('border-transparent', 'text-muted-foreground');
      });
      
      contents.forEach(c => c.classList.add('hidden'));
      
      // Add active classes
      this.classList.remove('border-transparent', 'text-muted-foreground');
      this.classList.add('border-primary', 'text-primary');
      
      // Show corresponding content
      const source = this.getAttribute('data-source');
      document.getElementById(source + '-logs').classList.remove('hidden');
    });
  });
  
  // WebSocket connection for real-time logs
  const cable = ActionCable.createConsumer();
  
  const logSubscription = cable.subscriptions.create({
    channel: 'DataPipelineChannel'
  }, {
    connected() {
      console.log('Connected to DataPipelineChannel');
    },
    
    disconnected() {
      console.log('Disconnected from DataPipelineChannel');
    },
    
    received(data) {
      handleLogUpdate(data);
    }
  });
  
  function handleLogUpdate(data) {
    const { source, type, message, item } = data;
    const container = document.getElementById(source + '-log-container');
    
    if (!container) return;
    
    // Clear initial waiting message
    const waitingMessage = container.querySelector('.text-center');
    if (waitingMessage) {
      waitingMessage.remove();
    }
    
    const timestamp = new Date().toLocaleTimeString();
    let logEntry = '';
    
    switch(type) {
      case 'collection_start':
        logEntry = `<div class="text-primary mb-2">[${timestamp}] 🚀 ${getSourceName(source)} 데이터 수집 시작</div>`;
        break;
        
      case 'collection_stop':
        logEntry = `<div class="text-destructive mb-2">[${timestamp}] ⏹️ ${getSourceName(source)} 데이터 수집 중지</div>`;
        break;
        
      case 'item_collected':
        logEntry = formatItemLog(timestamp, source, item);
        break;
        
      case 'batch_complete':
        logEntry = `<div class="text-success mb-2">[${timestamp}] ✅ 배치 완료: ${message}</div>`;
        break;
        
      case 'error':
        logEntry = `<div class="text-destructive mb-2">[${timestamp}] ❌ 오류: ${message}</div>`;
        break;
        
      default:
        logEntry = `<div class="text-muted-foreground mb-2">[${timestamp}] ${message}</div>`;
    }
    
    container.innerHTML += logEntry;
    
    // Auto-scroll to bottom
    container.scrollTop = container.scrollHeight;
  }
  
  function formatItemLog(timestamp, source, item) {
    if (!item) return '';
    
    const title = item.title || 'Untitled';
    const content = item.content || item.answer || '';
    const hasImages = item.has_images || false;
    
    // Truncate content to show preview
    const contentPreview = content.length > 100 ? content.substring(0, 100) + '...' : content;
    
    let logEntry = `<div class="border-l-2 border-primary pl-3 mb-3 text-sm">`;
    logEntry += `<div class="text-foreground font-medium">[${timestamp}] 📄 새 게시물 수집</div>`;
    logEntry += `<div class="text-primary mt-1">제목: ${title}</div>`;
    
    if (contentPreview) {
      logEntry += `<div class="text-muted-foreground mt-1">내용: ${contentPreview}</div>`;
    }
    
    if (hasImages) {
      logEntry += `<div class="text-destructive mt-1 font-medium">🖼️ 이미지 있음</div>`;
    }
    
    logEntry += `</div>`;
    
    return logEntry;
  }
  
  function getSourceName(source) {
    switch(source) {
      case 'stackoverflow': return '스택 오버플로우';
      case 'reddit': return '레딧';
      case 'oppadu': return '오빠두';
      default: return source;
    }
  }
  
  // Auto-refresh pipeline status every 10 seconds
  setInterval(() => {
    // Only refresh if page is visible
    if (!document.hidden) {
      fetch('/admin/data_pipeline/health_check')
        .then(response => response.json())
        .then(data => {
          updatePipelineStatus(data);
        })
        .catch(error => {
          console.error('Error fetching pipeline status:', error);
        });
    }
  }, 10000);
  
  function updatePipelineStatus(healthCheck) {
    // Update overall health indicators
    const runningCount = document.querySelector('.text-success');
    const failedCount = document.querySelector('.text-destructive');
    const stoppedCount = document.querySelector('.text-muted-foreground');
    
    if (runningCount) runningCount.textContent = healthCheck.running_sources;
    if (failedCount) failedCount.textContent = healthCheck.failed_sources;
    if (stoppedCount) stoppedCount.textContent = healthCheck.stopped_sources;
    
    // Update individual source status indicators
    Object.keys(healthCheck.sources).forEach(source => {
      const status = healthCheck.sources[source];
      const statusIndicator = document.querySelector(`[data-source="${source}"] .w-3.h-3`);
      
      if (statusIndicator) {
        statusIndicator.className = `w-3 h-3 rounded-full mr-2 ${getStatusColor(status.status)}`;
      }
    });
  }
  
  function getStatusColor(status) {
    switch(status) {
      case 'running': return 'bg-success animate-pulse';
      case 'failed': return 'bg-destructive';
      default: return 'bg-muted-foreground';
    }
  }
});
</script>