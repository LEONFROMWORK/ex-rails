<div class="ai-monitoring-dashboard">
  <div class="dashboard-header">
    <h1>AI 시스템 모니터링 대시보드</h1>
    <div class="last-updated">
      마지막 업데이트: <%= Time.current.strftime("%Y-%m-%d %H:%M:%S") %>
      <button class="btn-refresh" onclick="location.reload()">새로고침</button>
    </div>
  </div>

  <!-- 주요 지표 카드 -->
  <div class="metrics-grid">
    <div class="metric-card quality-score">
      <h3>평균 품질 점수</h3>
      <div class="metric-value <%= quality_class(@realtime_stats[:avg_quality]) %>">
        <%= (@realtime_stats[:avg_quality] * 100).round(1) %>%
      </div>
      <div class="metric-trend">
        <span>5분 평균</span>
      </div>
    </div>

    <div class="metric-card response-time">
      <h3>평균 응답 시간</h3>
      <div class="metric-value">
        <%= @realtime_stats[:avg_response_time]&.round(2) || 0 %>s
      </div>
      <div class="metric-trend">
        <span>모든 모델</span>
      </div>
    </div>

    <div class="metric-card error-rate">
      <h3>오류율</h3>
      <div class="metric-value <%= error_class(@realtime_stats[:error_rate]) %>">
        <%= (@realtime_stats[:error_rate] * 100).round(1) %>%
      </div>
      <div class="metric-trend">
        <span>최근 5분</span>
      </div>
    </div>

    <div class="metric-card cache-hit">
      <h3>캐시 히트율</h3>
      <div class="metric-value">
        <%= (@realtime_stats[:cache_hit_rate] * 100).round(1) %>%
      </div>
      <div class="metric-trend">
        <span>의미론적 캐시</span>
      </div>
    </div>
  </div>

  <!-- 모델 사용 분포 -->
  <div class="section model-distribution">
    <h2>모델 사용 분포</h2>
    <div class="distribution-chart">
      <% @realtime_stats[:model_distribution]&.each do |tier, data| %>
        <div class="model-tier">
          <div class="tier-name"><%= tier %></div>
          <div class="tier-model"><%= data[:model] %></div>
          <div class="progress-bar">
            <div class="progress-fill" style="width: <%= data[:percentage] %>%"></div>
          </div>
          <div class="tier-stats">
            <%= data[:count] %>회 (<%= data[:percentage] %>%)
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <!-- 회로 차단기 상태 -->
  <div class="section circuit-breakers">
    <h2>회로 차단기 상태</h2>
    <div class="breakers-grid">
      <% @circuit_breaker_status&.each do |breaker| %>
        <div class="breaker-card <%= breaker[:state] %>">
          <div class="breaker-service"><%= breaker[:service].split('_').last %></div>
          <div class="breaker-state">
            <span class="state-icon"></span>
            <%= breaker[:state].upcase %>
          </div>
          <% if breaker[:state] == :open %>
            <div class="retry-time">
              재시도까지: <%= breaker[:time_until_retry] %>초
            </div>
          <% end %>
          <div class="failure-count">
            실패: <%= breaker[:failure_count] %>회
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <!-- 캐시 통계 -->
  <div class="section cache-stats">
    <h2>캐시 통계</h2>
    <div class="stats-grid">
      <div class="stat-item">
        <label>총 항목:</label>
        <value><%= @cache_stats[:total_entries] %></value>
      </div>
      <div class="stat-item">
        <label>메모리 사용:</label>
        <value><%= @cache_stats[:memory_usage] %> MB</value>
      </div>
      <div class="stat-item">
        <label>가장 오래된 항목:</label>
        <value><%= @cache_stats[:oldest_entry]&.round(1) || 0 %>시간</value>
      </div>
      <div class="stat-item">
        <label>히트율:</label>
        <value><%= @cache_stats[:hit_rate] %>%</value>
      </div>
    </div>
  </div>

  <!-- 실시간 차트 -->
  <div class="section charts">
    <h2>실시간 메트릭</h2>
    <div class="chart-container">
      <canvas id="qualityChart"></canvas>
    </div>
    <div class="chart-container">
      <canvas id="performanceChart"></canvas>
    </div>
  </div>

  <!-- 최근 알림 -->
  <% if @recent_alerts&.any? %>
    <div class="section recent-alerts">
      <h2>최근 알림</h2>
      <div class="alerts-list">
        <% @recent_alerts.each do |alert| %>
          <div class="alert-item <%= alert['level'] %>">
            <div class="alert-time"><%= Time.parse(alert['timestamp']).strftime("%H:%M:%S") %></div>
            <div class="alert-message"><%= alert['message'] %></div>
            <div class="alert-details"><%= alert['details']&.to_json %></div>
          </div>
        <% end %>
      </div>
    </div>
  <% end %>

  <!-- 액션 버튼 -->
  <div class="section actions">
    <h2>관리 작업</h2>
    <div class="action-buttons">
      <%= link_to "상세 리포트", admin_ai_report_path, class: "btn btn-primary" %>
      <%= link_to "캐시 관리", admin_ai_cache_management_path, class: "btn btn-secondary" %>
      <%= link_to "회로 차단기 관리", admin_ai_circuit_breakers_path, class: "btn btn-secondary" %>
      <%= link_to "알림 설정", admin_ai_alerts_config_path, class: "btn btn-secondary" %>
    </div>
  </div>
</div>

<style>
  .ai-monitoring-dashboard {
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 40px;
  }

  .metric-card {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .metric-card h3 {
    margin: 0 0 10px 0;
    font-size: 14px;
    color: #666;
    text-transform: uppercase;
  }

  .metric-value {
    font-size: 36px;
    font-weight: bold;
    margin: 10px 0;
  }

  .metric-value.good { color: #28a745; }
  .metric-value.warning { color: #ffc107; }
  .metric-value.critical { color: #dc3545; }

  .section {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .breakers-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
  }

  .breaker-card {
    padding: 15px;
    border-radius: 6px;
    text-align: center;
  }

  .breaker-card.closed { background: #d4edda; }
  .breaker-card.open { background: #f8d7da; }
  .breaker-card.half_open { background: #fff3cd; }

  .progress-bar {
    background: #f0f0f0;
    height: 20px;
    border-radius: 10px;
    overflow: hidden;
    margin: 10px 0;
  }

  .progress-fill {
    background: #007bff;
    height: 100%;
    transition: width 0.3s ease;
  }

  .btn {
    display: inline-block;
    padding: 10px 20px;
    margin: 5px;
    border-radius: 5px;
    text-decoration: none;
    transition: background 0.3s;
  }

  .btn-primary {
    background: #007bff;
    color: white;
  }

  .btn-secondary {
    background: #6c757d;
    color: white;
  }

  .btn:hover {
    opacity: 0.9;
  }
</style>

<script>
  // 실시간 차트 업데이트
  document.addEventListener('DOMContentLoaded', function() {
    // 품질 차트 초기화
    const qualityCtx = document.getElementById('qualityChart')?.getContext('2d');
    if (qualityCtx) {
      fetchAndUpdateChart('quality', qualityCtx);
    }

    // 성능 차트 초기화
    const performanceCtx = document.getElementById('performanceChart')?.getContext('2d');
    if (performanceCtx) {
      fetchAndUpdateChart('performance', performanceCtx);
    }

    // 30초마다 자동 새로고침
    setInterval(() => {
      location.reload();
    }, 30000);
  });

  function fetchAndUpdateChart(metric, ctx) {
    fetch(`/admin/ai_monitoring/metrics?metric=${metric}&window=300`)
      .then(response => response.json())
      .then(data => {
        // Chart.js를 사용한 차트 렌더링
        console.log(`${metric} 데이터:`, data);
      })
      .catch(error => console.error(`${metric} 차트 로드 실패:`, error));
  }

  // 헬퍼 함수들
  function quality_class(score) {
    if (!score) return '';
    if (score >= 0.8) return 'good';
    if (score >= 0.65) return 'warning';
    return 'critical';
  }

  function error_class(rate) {
    if (!rate) return 'good';
    if (rate < 0.05) return 'good';
    if (rate < 0.1) return 'warning';
    return 'critical';
  }
</script>