<div class="w-full max-w-md mx-auto">
  <% if can_upload? %>
    <form id="file-upload-form" enctype="multipart/form-data" class="space-y-4">
      <div class="<%= upload_zone_classes %>" 
           onclick="document.getElementById('file-upload').click()"
           ondrop="handleDrop(event)" 
           ondragover="handleDragOver(event)"
           ondragenter="handleDragEnter(event)"
           ondragleave="handleDragLeave(event)">
        
        <%= tag.input(**upload_input_attributes, onchange: "handleFileSelect(event)") %>
        
        <div class="space-y-2">
          <svg class="mx-auto h-12 w-12 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
          
          <div class="text-sm text-muted-foreground">
            <p class="font-medium">Click to upload or drag and drop</p>
            <p>Excel files (<%= allowed_types_display %>)</p>
            <p>Max size: <%= max_file_size_mb %>MB</p>
          </div>
        </div>
      </div>
      
      <div id="file-info" class="hidden">
        <div class="bg-muted rounded-lg p-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
              <svg class="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span id="file-name" class="text-sm font-medium"></span>
            </div>
            <button type="button" onclick="clearFile()" class="text-destructive hover:text-destructive/80">
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          <div id="file-size" class="text-xs text-muted-foreground mt-1"></div>
        </div>
      </div>
      
      <div class="flex justify-between items-center">
        <div class="text-sm text-muted-foreground">
          Token cost: ~10 tokens
        </div>
        <button 
          type="submit" 
          id="upload-btn"
          class="bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-md text-sm font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Upload & Analyze
        </button>
      </div>
    </form>
  <% else %>
    <div class="<%= upload_zone_classes %>">
      <div class="space-y-2">
        <svg class="mx-auto h-12 w-12 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
        </svg>
        
        <div class="text-sm text-muted-foreground">
          <p class="font-medium">Insufficient tokens</p>
          <p>You need at least 10 tokens to upload files</p>
          <p>Current balance: <%= user.tokens %> tokens</p>
        </div>
      </div>
      
      <div class="mt-4">
        <a href="/tokens/purchase" class="inline-flex items-center px-4 py-2 bg-primary text-primary-foreground rounded-md text-sm font-medium hover:bg-primary/90 transition-colors">
          Purchase Tokens
        </a>
      </div>
    </div>
  <% end %>
</div>

<script>
function handleDragOver(e) {
  e.preventDefault();
  e.currentTarget.classList.add('border-primary', 'bg-primary/10');
}

function handleDragEnter(e) {
  e.preventDefault();
}

function handleDragLeave(e) {
  e.currentTarget.classList.remove('border-primary', 'bg-primary/10');
}

function handleDrop(e) {
  e.preventDefault();
  e.currentTarget.classList.remove('border-primary', 'bg-primary/10');
  
  const files = e.dataTransfer.files;
  if (files.length > 0) {
    handleFileSelect({ target: { files: files } });
  }
}

function handleFileSelect(event) {
  const file = event.target.files[0];
  if (!file) return;
  
  const allowedTypes = [<%= allowed_types.map { |type| "'#{type}'" }.join(", ") %>];
  const maxSize = <%= max_file_size %>;
  
  // Validate file type
  const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
  if (!allowedTypes.includes(fileExtension)) {
    alert('Invalid file type. Please select: <%= allowed_types_display %>');
    return;
  }
  
  // Validate file size
  if (file.size > maxSize) {
    alert(`File too large. Maximum size: <%= max_file_size_mb %>MB`);
    return;
  }
  
  // Show file info
  document.getElementById('file-name').textContent = file.name;
  document.getElementById('file-size').textContent = `${(file.size / 1024 / 1024).toFixed(2)} MB`;
  document.getElementById('file-info').classList.remove('hidden');
  document.getElementById('upload-btn').disabled = false;
}

function clearFile() {
  document.getElementById('file-upload').value = '';
  document.getElementById('file-info').classList.add('hidden');
  document.getElementById('upload-btn').disabled = true;
}

// Form submission
document.getElementById('file-upload-form').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const fileInput = document.getElementById('file-upload');
  const file = fileInput.files[0];
  
  if (!file) {
    alert('Please select a file first');
    return;
  }
  
  const formData = new FormData();
  formData.append('file', file);
  
  const uploadBtn = document.getElementById('upload-btn');
  uploadBtn.disabled = true;
  uploadBtn.textContent = 'Uploading...';
  
  try {
    const response = await fetch('/api/files', {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    });
    
    if (response.ok) {
      const result = await response.json();
      window.location.href = `/files/${result.file_id}`;
    } else {
      const error = await response.json();
      alert(error.message || 'Upload failed');
    }
  } catch (error) {
    alert('Network error. Please try again.');
  } finally {
    uploadBtn.disabled = false;
    uploadBtn.textContent = 'Upload & Analyze';
  }
});
</script>